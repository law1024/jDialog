{"version":3,"sources":["core.js","helper.js","event.js","operations.js","setting.js","components.js","compatibleAMD.js"],"names":[],"mappingspGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzevIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jDialog.js","sourcesContent":["var win = window;\nvar doc = document;\nvar version = '1.0.0';\nvar jDialog = function(message, callBack) {\n    /**\n     *\n     */\n    return new jDialog.fn.init(message, callBack);\n};\n\n\njDialog.fn = jDialog.prototype = {\n    constructor: jDialog,\n    /**\n     * @method init\n     * @param message\n     * @param callBack\n     * @returns {jDialog}\n     */\n    init: function(message, callBack) {\n\n        this.options = {\n            title: '提示', // title\n            modal: true, //是否启用模式窗口\n            content: '', // messages\n            autoHide: 0, // 自动销毁\n            /**\n             *  对话框class前缀，默认无\n             *  强制使用BEM规范\n             *  前缀在所有的dom结构上，均会被添加\n             */\n            prefix: '',\n            fixed: true,\n            /**\n             *  点击modal不会销毁\n             */\n            preventHide: false,\n            callBack: null,\n            // iframe\n            url: null\n        };\n        this.actions = {};\n        this.buttons = [];\n        jDialog.event.root = this;\n        // 只存活一个dialog\n        if (jDialog.currentDialog) {\n            jDialog.currentDialog.destory();\n        }\n        jDialog.currentDialog = this;\n\n        if (jDialog.isPlainObject(message)) {\n            jDialog.extend(this.options, message);\n\n        } else if (/string|number|boolean/gi.test(typeof(message))) {\n            this.options.content = message;\n            if (jDialog.isFunction(callBack)) {\n                this.options.callBack = callBack;\n            }\n        } else {\n            return this;\n        }\n\n        _renderDOM(this);\n\n        return this;\n    }\n};\n\n/**\n * 浅copy\n * @returns {*|{}}\n */\njDialog.extend = jDialog.fn.extend = function() {\n\n    var target = arguments[0] || {};\n    var options = arguments[1] || {};\n    var name;\n    var copy;\n\n    if (arguments.length === 1) {\n        target = this;\n        options = arguments[0];\n    }\n\n    for (name in options) {\n        copy = options[name];\n        if (copy !== undefined) {\n            target[name] = copy;\n        }\n    }\n\n    return target;\n};\n\n/**\n *\n * @type {{constructor: Function, init: Function}|jDialog.fn|*}\n */\njDialog.fn.init.prototype = jDialog.fn;\n","jDialog.extend({\n    /**\n     * is function\n     * @param fn\n     * @returns {boolean}\n     */\n    isFunction: function(fn) {\n        return Object.prototype.toString.call(fn) === '[object Function]';\n    },\n\n    /**\n     * 简单高效\n     * @param obj\n     * @returns {boolean}\n     */\n    isPlainObject: function(obj) {\n        if (obj === null || obj === undefined) {\n            return false;\n        }\n        return obj.constructor == {}.constructor;\n    },\n\n    isUrl: function(url) {\n        var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n        return regexp.test(url);\n    },\n\n    /**\n     * 顶级缓存对象，目前没什么用\n     */\n    expando: \"jDialog\" + (version + Math.random()).replace(/\\D/g, '')\n\n});\n","/**\n *\n * @type {{add: Function, remove: Function, has: Function, fire: Function}}\n */\njDialog.event = {\n    getRoot: function() {\n        return this.root || jDialog.currentDialog || jDialog();\n    },\n    add: function(actionName, handler) {\n        var root = this.getRoot();\n        if (!this.has(actionName)) {\n            root.actions[actionName] = [];\n        }\n        if (jDialog.isFunction(handler)) {\n            root.actions[actionName].push(handler);\n        }\n        return this;\n    },\n    remove: function(actionName) {\n        var root = this.getRoot();\n        if (this.has(actionName)) {\n            return delete root.actions[actionName];\n        }\n        console.warn(actionName + '不存在');\n        return false;\n    },\n    has: function(actionName) {\n        var root = this.getRoot();\n        if (typeof actionName !== 'string' || !root.actions[actionName]) {\n            return false;\n        }\n        return true;\n    },\n    once: function(actionName) {\n        if (this.has(actionName)) {\n            this.fire(actionName)\n                .remove(actionName);\n        }\n\n        return this;\n    },\n    fire: function(actionName) {\n        var root = this.getRoot();\n        if (this.has(actionName)) {\n            var actions = root.actions[actionName];\n            var length = actions.length;\n            if (length) {\n                var i = 0;\n                for (; i < length; i++) {\n                    actions[i].call(root);\n                }\n            }\n        }\n        return this;\n    }\n};\n","/**\n *\n * @param jDialog\n * @private\n */\nfunction _renderDOM(jDialog) {\n    var self = jDialog;\n    var wrapper = self.getWrapper();\n    var options = self.options;\n\n    // 没有title信息，则不显示header；\n    if (self.title() !== '') {\n        wrapper\n            .appendChild(self.getHeader());\n        self.title(options.title);\n    }\n\n    wrapper\n        .appendChild(self.getContainer());\n    wrapper\n        .appendChild(self.getFooter());\n\n    //\n\n    if (options.url) {\n        self.iframe(options.url);\n\n    } else {\n        self.content(options.content);\n\n    }\n\n    self.addButton('取消', 'destory', function() {\n        self.destory();\n    });\n\n    //\n    if (options.modal) {\n        self.showModal();\n    }\n\n    if (options.autoHide) {\n        self.autoHide(options.autoHide);\n    }\n\n    //\n    if (options.callBack) {\n        self.addButton('确定', 'apply', options.callBack);\n    }\n\n    wrapper.addEventListener('click', _eventRouter.bind(self), false);\n    doc.body.appendChild(wrapper);\n\n    self.verticalInViewPort(options.fixed)\n        .addClass('dialog-zoom-in');\n    return self;\n};\n\n/**\n *\n * @param tagName\n * @param attrs\n * @returns {HTMLElement}\n * @private\n */\nfunction _createElement(tagName, attrs) {\n    var element = doc.createElement(tagName);\n    jDialog.extend(element, attrs);\n    return element;\n};\n\n/**\n *\n * @param event\n * @private\n */\nfunction _eventRouter(event) {\n    var target = event.target;\n    var actionName = target.getAttribute('data-dialog-action');\n    if (!actionName) {\n        return;\n    }\n    jDialog.event.fire(actionName);\n};\n\n/**\n *\n * @param context\n * @returns {HTMLElement}\n * @private\n */\nfunction _createModal(context) {\n    var self = context;\n    var element = _createElement('div');\n    element.style.cssText = ';background:rgba(0,0,0,0.3);width:100%;' + 'height:100%;position:fixed;left:0;top:0;z-index:' + (self.currentDOMIndex - 1);\n    element.onclick = function() {\n        if (!self.options.preventHide) {\n            jDialog.event.fire('destory');\n        }\n    };\n    doc.body.appendChild(element);\n    return element;\n}\n\njDialog.fn.extend({\n\n    /**\n     * 保证 position:fixed 的dialog永远处于视口内；\n     */\n    verticalInViewPort: function(useFixed) {\n        var docElement = doc.documentElement;\n        var clientHeight = docElement.clientHeight;\n        var dialogHeight = this.height();\n\n        if (useFixed) {\n\n            if (dialogHeight > clientHeight) {\n                dialogHeight = clientHeight - 30;\n                this.getContainer().style.height =\n                    dialogHeight - (this.height(this.getHeader()) + this.height(this.getFooter())) + 'px';\n            }\n            this.height(dialogHeight)\n                .toggleLockBody(true)\n                .extend(this.getWrapper().style, {\n                    position: 'fixed',\n                    bottom: 0,\n                    top: 0\n                });\n\n        } else {\n\n            // 矫情，明知道webkit取scrollTop是从body取，还要这么做\n            var scrollTop = Math.max(doc.body.scrollTop, docElement.scrollTop);\n            var top = Math.max((clientHeight - dialogHeight) * 382 / 1000 + scrollTop, scrollTop);\n\n            this.top(top)\n                .height('auto')\n                .toggleLockBody(false)\n                .getContainer().style.height = 'auto';\n\n        }\n\n        return this;\n    },\n\n    /**\n     * 锁住body的scroll，不让其滚动；\n     * @param useLock\n     */\n    toggleLockBody: function(useLock) {\n\n        var header = this.getHeader();\n        var footer = this.getFooter();\n        var modal = this.getModal();\n        var ev = 'ontouchmove';\n\n        if (useLock) {\n            header[ev] = footer[ev] = modal[ev] = function(){\n                return false;\n            }\n        } else {\n            header[ev] = footer[ev] = modal[ev] = null;\n        }\n\n        //        var height = '';\n        //        var hiddenType = '';\n        //        if (useLock) {\n        //            height = '100%';\n        //            hiddenType = 'hidden';\n        //        }\n        //        doc.body.style.height = height;\n        //        doc.body.style.overflow = hiddenType;\n        return this;\n    },\n\n    /**\n     *  获取dialog的DOM结构\n     * @returns {HTMLElement|*|wrapper}\n     */\n    getWrapper: function() {\n        if (!this.wrapper) {\n            var prefix = this.options.prefix;\n            this.wrapper = _createElement('div', {\n                className: prefix + 'dialog'\n            });\n\n            this.wrapper.style.zIndex = this.currentDOMIndex = 614;\n        }\n\n        return this.wrapper;\n    },\n\n    /**\n     *  获取页头的DOM结构\n     * @returns {HTMLElement|*|header}\n     */\n    getHeader: function() {\n        if (!this.header) {\n            var prefix = this.options.prefix;\n            this.header = _createElement('div', {\n                className: prefix + 'dialog-header'\n            });\n        }\n        return this.header;\n    },\n\n    /**\n     * 隐藏页头\n     * @returns {*}\n     */\n    hideHeader: function() {\n        var header = this.getHeader();\n        var height = this.height(header);\n        this.height(this.height() - height);\n        header.style.display = 'none';\n        return this;\n    },\n\n    /**\n     * 获取当前dialog内容的DOM结构\n     * @returns {HTMLElement|*|container}\n     */\n    getContainer: function() {\n        if (!this.container) {\n            var prefix = this.options.prefix;\n            this.container = _createElement('div', {\n                className: prefix + 'dialog-body'\n            });\n        }\n        return this.container;\n    },\n\n    /**\n     * 获取页尾的dom结构\n     * @returns {HTMLElement|*|footer}\n     */\n    getFooter: function() {\n        if (!this.footer) {\n            var prefix = this.options.prefix;\n            this.footer = _createElement('div', {\n                className: prefix + 'dialog-footer'\n            });\n        }\n        return this.footer;\n    },\n\n    /**\n     * 隐藏页尾\n     * @returns {*}\n     */\n    hideFooter: function() {\n        var footer = this.getFooter();\n        var height = this.height(footer);\n        this.height(this.height() - height);\n        footer.style.display = 'none';\n        return this;\n    },\n\n    /**\n     * 添加按钮及事件\n     * @method addButton\n     * @param text\n     * @param actionName\n     * @param handler\n     * @returns {*}\n     */\n\n    addButton: function(text, actionName, handler) {\n\n        // 模拟重载\n        var fnKey = (\"jDialog\" + Math.random()).replace(/\\D/g, '');\n        var defaultText = '确定';\n        // 如果第一个参数是一个function\n        if (jDialog.isFunction(text)) {\n            return this.addButton(defaultText, actionName || fnKey, text);\n        }\n\n        if (jDialog.isFunction(actionName)) {\n            return this.addButton(text, fnKey, actionName);\n        }\n\n        var prefix = this.options.prefix;\n        var element = _createElement('a', {\n            href: 'javascript:;',\n            className: prefix + 'dialog-btn',\n            innerHTML: text || defaultText\n        });\n\n        if (!actionName) {\n            actionName = \"destory\";\n        } else {\n            jDialog.event.add(actionName, handler);\n        }\n        element.setAttribute('data-dialog-action', actionName);\n\n        var footer = this.getFooter();\n        if (this.buttons.length) {\n            this.addClass(\"dialog-btn-primary\", element);\n            footer.insertBefore(element, footer.childNodes.item(0));\n        } else {\n            footer.appendChild(element);\n        }\n        this.buttons.push(element);\n\n        return this;\n    },\n\n    // 如果保证每个按钮对应队里的action，则可放心移除button\n    delButton: function(index) {\n        var button = this.getButton(index);\n        var actionName;\n        if (button) {\n            actionName = button.getAttribute('data-dialog-action');\n            jDialog.event.remove(actionName);\n            this.getFooter().removeChild(button);\n            var i = this.buttons.indexOf(button);\n            this.buttons.splice(i, 1);\n        }\n        return this;\n    },\n\n    getButton: function(index) {\n        var buttons = this.buttons.slice().reverse();\n        if (buttons[index]) {\n            return buttons[index];\n        } else {\n            return null;\n        }\n    },\n    /**\n     * 为当前dialog添加class\n     * @param className\n     * @returns {*}\n     */\n    addClass: function(className, context) {\n        // 自动补齐前缀\n        //var prefix = this.options.prefix;\n        //var reg = new RegExp('^' + prefix, 'gi');\n        //if (!reg.test(className)) {\n        //    className = prefix + className;\n        //}\n        var context = context || this.getWrapper();\n        if (context.nodeType === 1 && typeof className === 'string') {\n            context.classList.add(className);\n        }\n        return this;\n    },\n\n    /**\n     * 为当前dialog添加remove\n     * @param className\n     */\n    removeClass: function(className, context) {\n        //var prefix = this.options.prefix;\n        //var reg = new RegExp('^' + prefix, 'gi');\n        //if (!reg.test(className)) {\n        //    className = prefix + className;\n        //}\n        var context = context || this.getWrapper();\n        if (context.nodeType === 1 && typeof className === 'string') {\n            context.classList.remove(className);\n        }\n        return this;\n    },\n\n    /**\n     * 设置自动隐藏时间\n     * @param delay  为0，直接销毁；不设置，采用默认用户设置；\n     * @returns {*}\n     */\n    autoHide: function(delay) {\n        if (!jDialog.currentDialog) {\n            return this;\n        }\n\n        // 0则自动销毁；\n        if (delay == 0) {\n            return this.destory();\n        }\n\n        //\n        if (delay === undefined) {\n            return this.autoHide(this.options.autoHide);\n        }\n\n        // 将会已最新的delay为准\n        if (this.autoHideTimer) {\n            clearTimeout(this.autoHideTimer);\n        }\n\n        this.autoHideTimer = setTimeout(function() {\n            this.destory();\n            clearTimeout(this.autoHideTimer);\n            this.autoHideTimer = null;\n        }.bind(this), delay * 1000);\n\n        return this;\n    },\n\n    /**\n     *\n     * @returns {*}\n     */\n    destory: function() {\n        if (this.wrapper) {\n            this.wrapper.removeEventListener('click', _eventRouter, false);\n            doc.body.removeChild(this.wrapper);\n        }\n        if (this.modal) {\n            this.modal.onclick = null;\n            doc.body.removeChild(this.modal);\n        }\n        if (this.autoHideTimer) {\n            clearTimeout(this.autoHideTimer);\n        }\n        this.toggleLockBody(false);\n        this.actions = [];\n        jDialog.event.root = jDialog.currentDialog = null;\n        return this;\n    },\n\n    /**\n     * 获取当前dialog的Modal的DOM结构\n     * @returns {modal|*}\n     */\n    getModal: function() {\n        if (!this.modal) {\n            this.modal = _createModal(this);\n        }\n        return this.modal;\n    },\n\n    /**\n     * 隐藏当前dialog的Modal\n     * @returns {*}\n     */\n    hideModal: function() {\n        this.getModal().style.display = 'none';\n        return this;\n    },\n\n    /**\n     * 显示当前dialog的Modal\n     * @returns {*}\n     */\n    showModal: function() {\n        this.getModal().style.display = '';\n        return this;\n    },\n    iframe: function(url) {\n        var self = this;\n        var url = url || self.options.url;\n        if (!jDialog.isUrl(url)) {\n            return self.content(url + '不是一个有效的地址');\n        }\n\n        var container = self.getContainer();\n        var clientHeight = doc.documentElement.clientHeight;\n\n        container.style.position = 'relative';\n        this.content('<div ' +\n            'style=\"text-align: center;background-color: rgba(255,255,255,0.5);' +\n            'position:absolute;' +\n            'left:0;top:0;width:100%;height:100%\">' +\n            'loading...</div>');\n\n        var iframe = _createElement('iframe', {\n            frameborder: 0,\n            width: '100%',\n            height: clientHeight\n        });\n        iframe.onload = function() {\n            var parent = this.parentNode;\n            var loadingElement = parent.getElementsByTagName('div')[0];\n            parent.removeChild(loadingElement);\n            iframe.onload = null;\n        }\n        iframe.onerror = function() {\n            // ,<a href=\"#nogo\" onclick=\"\">重新加载</a>\n            self.content('加载' + url + '时发生错误');\n            iframe.onerror = null;\n        }\n\n        container.appendChild(iframe);\n        iframe.src = url;\n        return self;\n    }\n});\n","/**\n *  设置函数集\n * @param number\n * @returns {*}\n */\nvar addPixelUnit = function(number) {\n    if (!/em|px|rem|pt|%|auto/gi.test(number)) {\n        number = number + 'px';\n    }\n    return number;\n};\n\njDialog.fn.extend({\n\n    /**\n     * 返回当前的title或为dialog设置title\n     * @param text\n     * @returns {*}\n     */\n    title: function(value) {\n        if (typeof value === 'undefined') {\n            return this.options.title;\n        }\n        this.getHeader().innerHTML = this.options.title = value;\n        return this;\n    },\n\n    /**\n     * 返回当前设置的content或设置content\n     * @param value\n     * @returns {*}\n     */\n    content: function(value) {\n        if (value === undefined) {\n            return this.options.content;\n        }\n        this.getContainer().innerHTML = this.options.content = value;\n        return this;\n    },\n\n    /**\n     * 返回当前的height或为dialog设置height\n     * @param value\n     * @returns {*}\n     */\n    height: function(value) {\n\n        if (value === undefined) {\n            return this.height(this.getWrapper());\n        }\n\n        if (value.nodeType === 1) {\n            return value.offsetHeight;\n        }\n\n        this.wrapper.style.height = addPixelUnit(value);\n        return this;\n    },\n\n    /**\n     * 返回当前dialog的宽度或为dialog设置宽度\n     * @param value\n     * @returns {*}\n     */\n    width: function(value) {\n        if (value === undefined) {\n            return this.width(this.getWrapper());\n        }\n\n        if (value.nodeType === 1) {\n            return value.offsetWidth;\n        }\n\n        this.wrapper.style.width = addPixelUnit(value);\n        return this;\n    },\n\n    /**\n     * 返回当前的z-index值或为dialog设置z-index\n     * @param index\n     * @returns {*}\n     */\n    index: function(value) {\n        if (value === undefined) {\n            return this.currentDOMIndex;\n        }\n        this.currentDOMIndex = value;\n        this.wrapper.style.zIndex = this.currentDOMIndex;\n        // 永远比wrapper小1\n        this.getModal().style.zIndex = this.currentDOMIndex - 1;\n        return this;\n    },\n\n    /**\n     * 返回当前的top值或者为dialog设置top\n     * @param value\n     * @returns {*}\n     */\n    top: function(value) {\n        if (value === undefined) {\n            return win.getComputedStyle(this.getWrapper()).top;\n        }\n        this.wrapper.style.top = addPixelUnit(value);\n        this.wrapper.style.bottom = '';\n        return this;\n    },\n\n    /**\n     * 相对于视口，还是相对于文档流\n     * @param isUse\n     * @returns {*}\n     */\n    fixed: function(isUse) {\n        var flag = true;\n        if (!isUse || (typeof isUse !== \"undefined\")) {\n            flag = false;\n            this.getWrapper().style.position = 'absolute';\n        }\n        return this.verticalInViewPort(flag);\n    },\n\n    // 为了防止歧义而存在\n    absolute: function() {\n        return this.fixed(false);\n    },\n\n    /**\n     *\n     */\n    preventHide: function() {\n        this.options.preventHide = true;\n        return this;\n    }\n});\n","/**\n *  封装一些常用的dialog\n */\njDialog.extend({\n    alert: function(message) {\n        return jDialog(message);\n    },\n    toast: function(message, delay) {\n        var dialog = jDialog(message);\n        var container = dialog.getContainer();\n        var height = dialog.height(container);\n        dialog.getContainer().style.textAlign = 'center';\n        dialog\n            .hideFooter()\n            .hideHeader()\n            .hideModal()\n            .height(height)\n            .addClass('dialog-toast')\n            .autoHide(delay || 3);\n        return dialog;\n    },\n    error: function(message, callBack) {\n        return jDialog(message, callBack).addClass('dialog-error');\n    }\n});\n","if (typeof define === \"function\" && define.amd) {\n    define(\"jdialog\", [], function() {\n        return jDialog;\n    });\n} else {\n    win.jDialog = jDialog;\n}\n"],"sourceRoot":"/source/"}