{"version":3,"sources":["core.js","helper.js","event.js","operations.js","setting.js","components.js"],"names":[],"mappingslGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jDialog.js","sourcesContent":["var win = window;\r\nvar doc = document;\r\nvar event;\r\nvar jDialog = function (message, callBack) {\r\n    /**\r\n     *\r\n     */\r\n    return new jDialog.fn.init(message, callBack);\r\n}\r\n\r\n/**\r\n *\r\n * @type {{constructor: Function, init: Function}}\r\n */\r\njDialog.fn = jDialog.prototype = {\r\n    constructor: jDialog,\r\n    version: '0.9.3',\r\n    /**\r\n     * @method init\r\n     * @param message\r\n     * @param callBack\r\n     * @returns {jDialog}\r\n     */\r\n    init: function (message, callBack) {\r\n\r\n        if (!message) {\r\n            return this;\r\n        }\r\n        this.options = {\r\n            title: '提示',          // title\r\n            modal: true,        //是否启用模式窗口\r\n            msg: '',                // messages\r\n            autoHide: 0,        // 自动销毁\r\n            /**\r\n             *  对话框class前缀，默认无\r\n             *  强制使用BEM规范\r\n             *  前缀在所有的dom结构上，均会被添加\r\n             */\r\n            prefix: \"\",\r\n            preventHide: false,\r\n            callBack: null\r\n        };\r\n\r\n        if (this.isPlainObject(message)) {\r\n            this.extend(this.options, message);\r\n\r\n        } else if (/string|number|boolean/gi.test(typeof(message))) {\r\n            this.options.msg = message;\r\n            if (this.isFunction(callBack)) {\r\n                this.options.callBack = callBack;\r\n            }\r\n        }\r\n\r\n        this.actions = {};\r\n        jDialog.event.root = this;\r\n        this.renderDOM();\r\n\r\n        // 只存活一个dialog\r\n        if (jDialog.currentDialog) {\r\n            jDialog.currentDialog.destory();\r\n        }\r\n        jDialog.currentDialog = this;\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * 浅copy\r\n * @returns {*|{}}\r\n */\r\njDialog.extend = jDialog.fn.extend = function () {\r\n\r\n    var target = arguments[0] || {};\r\n    var options = arguments[1] || {};\r\n    var name;\r\n    var copy;\r\n\r\n    if (arguments.length === 1) {\r\n        target = this;\r\n        options = arguments[0];\r\n    }\r\n\r\n    for (name in options) {\r\n        copy = options[name];\r\n        if (copy !== undefined) {\r\n            target[name] = copy;\r\n        }\r\n    }\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n *\r\n * @type {{constructor: Function, init: Function}|jDialog.fn|*}\r\n */\r\njDialog.fn.init.prototype = jDialog.fn;","jDialog.fn.extend({\r\n    /**\r\n     * is function\r\n     * @param fn\r\n     * @returns {boolean}\r\n     */\r\n    isFunction: function (fn) {\r\n        return Object.prototype.toString.call(fn) === '[object Function]';\r\n    },\r\n\r\n    /**\r\n     * 简单高效\r\n     * @param obj\r\n     * @returns {boolean}\r\n     */\r\n    isPlainObject: function (obj) {\r\n        if (obj === null) {\r\n            return false;\r\n        }\r\n        return obj.constructor == {}.constructor;\r\n    }\r\n});","/**\r\n *\r\n * @type {{add: Function, remove: Function, has: Function, fire: Function}}\r\n */\r\njDialog.event = {\r\n    add: function (actionName, handler) {\r\n        var self = this.root;\r\n        if (!this.has(actionName)) {\r\n            self.actions[actionName] = [];\r\n        }\r\n        if (self.isFunction(handler)) {\r\n            self.actions[actionName].push(handler);\r\n        }\r\n    },\r\n    remove: function (actionName) {\r\n        var self = this.root;\r\n        if (this.has(actionName)) {\r\n            return delete self.actions[actionName];\r\n        }\r\n        console.warn(actionName + '不存在');\r\n        return false;\r\n    },\r\n    has: function (actionName) {\r\n        var self = this.root;\r\n        return self.actions[actionName] ? true : false;\r\n    },\r\n    fire: function (actionName) {\r\n        var self = this.root;\r\n        if (this.has(actionName)) {\r\n            var actions = self.actions[actionName];\r\n            var length = actions.length;\r\n            if (!length) {\r\n                return false;\r\n            }\r\n            var i = 0;\r\n            for (; i < length; i++) {\r\n                actions[i].call(self);\r\n            }\r\n        }\r\n    }\r\n}","jDialog.fn.extend({\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    renderDOM: function () {\r\n\r\n        var wrapper = this.getWrapper();\r\n\r\n        wrapper\r\n            .appendChild(this.getHeader());\r\n        wrapper\r\n            .appendChild(this.getContainer());\r\n        wrapper\r\n            .appendChild(this.getFooter());\r\n\r\n        //\r\n        this.title(this.options.title)\r\n            .message(this.options.msg);\r\n\r\n        if (this.options.modal) {\r\n            this.showModal();\r\n        }\r\n\r\n        if (this.options.callBack) {\r\n            //this.addButton('确定', 'apply', this.options.callBack);\r\n        }\r\n\r\n        this.addButton('取消', 'destory', function () {\r\n            this.destory();\r\n        });\r\n\r\n        wrapper.addEventListener('click', this.eventRouter.bind(this), false);\r\n        doc.body.appendChild(wrapper);\r\n\r\n        // 计算位置\r\n        var clientHeight = doc.documentElement.clientHeight;\r\n        // 如果dialog的高度大于视口的高度\r\n        if (this.height() > clientHeight) {\r\n            this.height(clientHeight - 30);\r\n            this.getContainer().style.height =\r\n                this.height()\r\n                - (this.getHeader().offsetHeight + this.getFooter().offsetHeight)\r\n                + 'px';\r\n        } else {\r\n            this.height(this.height());\r\n        }\r\n        this.extend(wrapper.style, {\r\n            bottom: 0,\r\n            top: 0\r\n        });\r\n\r\n        this.toggleLockBody(true);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param useLock\r\n     */\r\n    toggleLockBody: function (useLock) {\r\n        var height = \"\";\r\n        var hiddenType = \"\";\r\n        if (useLock) {\r\n            height = \"100%\";\r\n            hiddenType = \"hidden\";\r\n        }\r\n        doc.body.style.height = height;\r\n        doc.body.style.overflow = hiddenType;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    eventRouter: function (event) {\r\n        var target = event.target;\r\n        var actionName = target.getAttribute('data-dialog-action');\r\n        if (!actionName) {\r\n            return;\r\n        }\r\n        jDialog.event.fire(actionName);\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param tagName\r\n     * @param attrs\r\n     * @returns {HTMLElement}\r\n     * @private\r\n     */\r\n    _createElement: function (tagName, attrs) {\r\n        var element = doc.createElement(tagName);\r\n        this.extend(element, attrs);\r\n        return element;\r\n    },\r\n\r\n    /**\r\n     *  获取dialog的DOM结构\r\n     * @returns {HTMLElement|*|wrapper}\r\n     */\r\n    getWrapper: function () {\r\n        if (!this.wrapper) {\r\n            var prefix = this.options.prefix;\r\n            this.wrapper = this._createElement('div', {\r\n                className: prefix + 'dialog'\r\n            });\r\n\r\n            this.wrapper.style.zIndex = this.currentDOMIndex = 9;\r\n        }\r\n\r\n        return this.wrapper;\r\n    },\r\n\r\n    /**\r\n     *  获取页头的DOM结构\r\n     * @returns {HTMLElement|*|header}\r\n     */\r\n    getHeader: function () {\r\n        if (!this.header) {\r\n            var prefix = this.options.prefix;\r\n            this.header = this._createElement('div', {\r\n                className: prefix + 'dialog-header'\r\n            });\r\n        }\r\n        return this.header;\r\n    },\r\n\r\n    /**\r\n     * 隐藏页头\r\n     * @returns {*}\r\n     */\r\n    hideHeader: function () {\r\n        var header = this.getHeader();\r\n        var height = header.offsetHeight;\r\n        this.height(this.height() - height);\r\n        header.style.display = 'none';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 获取当前dialog内容的DOM结构\r\n     * @returns {HTMLElement|*|container}\r\n     */\r\n    getContainer: function () {\r\n        if (!this.container) {\r\n            var prefix = this.options.prefix;\r\n            this.container = this._createElement('div', {\r\n                className: prefix + 'dialog-body'\r\n            });\r\n        }\r\n        return this.container;\r\n    },\r\n\r\n    /**\r\n     * 获取页尾的dom结构\r\n     * @returns {HTMLElement|*|footer}\r\n     */\r\n    getFooter: function () {\r\n        if (!this.footer) {\r\n            var prefix = this.options.prefix;\r\n            this.footer = this._createElement('div', {\r\n                className: prefix + 'dialog-footer'\r\n            });\r\n        }\r\n        return this.footer;\r\n    },\r\n\r\n    /**\r\n     * 隐藏页尾\r\n     * @returns {*}\r\n     */\r\n    hideFooter: function () {\r\n        var footer = this.getFooter();\r\n        var height = footer.offsetHeight;\r\n        this.height(this.height() - height);\r\n        footer.style.display = 'none';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param text\r\n     * @param actionName\r\n     * @param handler\r\n     * @returns {*}\r\n     */\r\n    addButton: function (text, actionName, handler) {\r\n        var prefix = this.options.prefix;\r\n        var element = this._createElement('a', {\r\n            href: 'javascript:;',\r\n            className: prefix + 'dialog-btn',\r\n            innerHTML: text || '按钮'\r\n        });\r\n        if (actionName) {\r\n            element.setAttribute('data-dialog-action', actionName);\r\n            jDialog.event.add(actionName, handler);\r\n        }\r\n        //\r\n        this.getFooter().appendChild(element);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 为当前dialog添加class\r\n     * @param className\r\n     * @returns {*}\r\n     */\r\n    addClass: function (className) {\r\n        // 自动补齐前缀\r\n        //var prefix = this.options.prefix;\r\n        //var reg = new RegExp('^' + prefix, 'gi');\r\n        //if (!reg.test(className)) {\r\n        //    className = prefix + className;\r\n        //}\r\n        this.getWrapper().classList.add(className);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 为当前dialog添加remove\r\n     * @param className\r\n     */\r\n    removeClass: function (className) {\r\n        //var prefix = this.options.prefix;\r\n        //var reg = new RegExp('^' + prefix, 'gi');\r\n        //if (!reg.test(className)) {\r\n        //    className = prefix + className;\r\n        //}\r\n        this.getWrapper().classList.remove(className);\r\n    },\r\n\r\n    /**\r\n     * 设置自动隐藏时间\r\n     * @param delay  为0，直接销毁；不设置，采用默认用户设置；\r\n     * @returns {*}\r\n     */\r\n    autoHide: function (delay) {\r\n\r\n        // 0则自动销毁；\r\n        if (delay == 0) {\r\n            this.destory();\r\n            return this;\r\n        }\r\n\r\n        //\r\n        if (delay === undefined) {\r\n            this.autoHide(this.options.autoHide);\r\n            return this;\r\n        }\r\n\r\n        // 将会已最新的delay为准\r\n        if (this.autoHideTimer) {\r\n            clearTimeout(this.autoHideTimer);\r\n        }\r\n\r\n        this.autoHideTimer = setTimeout(function () {\r\n            this.destory();\r\n            clearTimeout(this.autoHideTimer);\r\n            this.autoHideTimer = null;\r\n        }.bind(this), delay * 1000);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    destory: function () {\r\n        if (this.wrapper) {\r\n            this.wrapper.removeEventListener('click', this.eventRouter, false);\r\n            doc.body.removeChild(this.wrapper);\r\n        }\r\n        if (this.modal) {\r\n            doc.body.removeChild(this.modal);\r\n        }\r\n        this.toggleLockBody(false);\r\n        jDialog.currentDialog = null;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    createModal: function () {\r\n        var element = this._createElement('div');\r\n        element.style.cssText = \";background:rgba(0,0,0,0.3);width:100%;\" + \"height:100%;position:fixed;left:0;top:0;z-index:\" + (this.currentDOMIndex - 1);\r\n        element.onclick = function () {\r\n            //jDialog.event.fire('destory');\r\n        }.bind(this);\r\n        doc.body.appendChild(element);\r\n        return element;\r\n    },\r\n\r\n    /**\r\n     * 获取当前dialog的Modal的DOM结构\r\n     * @returns {modal|*}\r\n     */\r\n    getModal: function () {\r\n        if (!this.modal) {\r\n            this.modal = this.createModal();\r\n        }\r\n        return this.modal;\r\n    },\r\n\r\n    /**\r\n     * 隐藏当前dialog的Modal\r\n     * @returns {*}\r\n     */\r\n    hideModal: function () {\r\n        this.getModal().style.display = 'none';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 显示当前dialog的Modal\r\n     * @returns {*}\r\n     */\r\n    showModal: function () {\r\n        this.getModal().style.display = '';\r\n        return this;\r\n    }\r\n});\r\n","/**\r\n *  设置类函数集\r\n * @param number\r\n * @returns {*}\r\n */\r\nvar addPixelUnit = function (number) {\r\n    if (!/em|px|rem|pt|%/gi.test(number)) {\r\n        number = number + 'px';\r\n    }\r\n    return number;\r\n}\r\n\r\njDialog.fn.extend({\r\n\r\n    /**\r\n     * 返回当前的title或为dialog设置title\r\n     * @param text\r\n     * @returns {*}\r\n     */\r\n    title: function (value) {\r\n        if (value === undefined) {\r\n            return this.options.title;\r\n        }\r\n        this.getHeader().innerHTML = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 返回当前设置的message或设置message\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    message: function (value) {\r\n        if (value === undefined) {\r\n            return this.options.msg;\r\n        }\r\n        this.getContainer().innerHTML = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 返回当前的height或为dialog设置height\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    height: function (value) {\r\n        if (value === undefined) {\r\n            return this.getWrapper().offsetHeight;\r\n        }\r\n        this.wrapper.style.height = addPixelUnit(value);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 返回当前dialog的宽度或为dialog设置宽度\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    width: function (value) {\r\n        if (value === undefined) {\r\n            return this.getWrapper().offsetWidth;\r\n        }\r\n        this.wrapper.style.width = addPixelUnit(value);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 返回当前的z-index值或为dialog设置z-index\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    index: function (value) {\r\n        if (value === undefined) {\r\n            return this.currentDOMIndex;\r\n        }\r\n        this.currentDOMIndex = value;\r\n        this.wrapper.style.zIndex = this.currentDOMIndex;\r\n        // 永远比wrapper小1\r\n        this.getModal().style.zIndex = this.currentDOMIndex - 1;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     *  返回当前的top值或者为dialog设置top\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    top: function (value) {\r\n        if (value === undefined) {\r\n            return win.getComputedStyle(this.getWrapper()).top;\r\n        }\r\n        this.wrapper.style.top = addPixelUnit(value);\r\n        this.wrapper.style.bottom = \"\";\r\n        return this;\r\n    }\r\n});","/**\r\n *  封装一些常用的dialog\r\n */\r\njDialog.extend({\r\n    alert: function (message) {\r\n        return jDialog(message);\r\n    },\r\n    toast: function (message, delay) {\r\n        var dialog = jDialog(message);\r\n        dialog.getContainer().style.textAlign = \"center\";\r\n        dialog\r\n            .hideFooter()\r\n            .hideHeader()\r\n            .hideModal()\r\n            .addClass('dialog-toast')\r\n            .autoHide(delay || 3);\r\n        return dialog;\r\n    },\r\n    error: function (message, callBack) {\r\n        return jDialog(message,callBack).addClass('dialog-error');\r\n    }\r\n});"],"sourceRoot":"/source/"}